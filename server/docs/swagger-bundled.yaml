openapi: 3.0.0
info:
  title: Users API
  version: 1.0.0
  description: API for managing users with HAL-style hypermedia responses
servers:
  - url: 'http://localhost:3001/api'
paths:
  /ping:
    get:
      summary: Ping test
      responses:
        '200':
          description: OK
  '/login/{user_id}':
    post:
      summary: User login
      description: 'Authenticates a user by their ID, email, and password. Returns a JWT token on success.'
      tags:
        - Authentication
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: test@example.com
        password:
          type: string
          example: yourpassword123
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        expiresIn:
          type: integer
          example: 3600
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: Vern
            email:
              type: string
              example: test@example.com
  responses:
    BadRequest:
      description: Invalid request body
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid request body
    NotFound:
      description: User not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: User not found
    Unauthorized:
      description: Invalid email or password
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid email or password
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: An unexpected error occurred
