openapi: 3.0.0
info:
  title: Users API
  version: 1.0.0
  description: API for managing users with HAL-style hypermedia responses
servers:
  - url: 'http://localhost:3001/api'
paths:
  '/login/{user_id}':
    post:
      summary: User login
      description: 'Authenticates a user by their ID, email, and password. Returns a JWT token on success.'
      tags:
        - Authentication
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An unexpected error occurred
  /users:
    get:
      summary: Get all users
      description: 'Retrieve a list of users from the database, excluding their password fields.'
      tags:
        - All Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a new user
      description: Creates a new user in the database after validating the request body and hashing the password.
      tags:
        - All Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/users/{user_id}':
    get:
      summary: Get a user by ID
      description: Retrieve a user from the database based on the provided user ID.
      tags:
        - User
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a user by ID
      description: Update a user's details in the database based on the provided user ID.
      tags:
        - User
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a user by ID
      description: Delete a user from the database based on the provided user ID.
      tags:
        - User
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: test@example.com
        password:
          type: string
          example: yourpassword123
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        expiresIn:
          type: integer
          example: 3600
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: Vern
            email:
              type: string
              example: test@example.com
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        phone:
          type: string
          example: 1234567890
        nickname:
          type: string
          example: Johnny
    AddUserRequest:
      type: object
      required:
        - name
        - email
        - phone
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        phone:
          type: string
          example: 1234567890
        password:
          type: string
          example: securepassword123
        nickname:
          type: string
          example: Johnny
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        phone:
          type: string
          example: 1234567890
        password:
          type: string
          example: securepassword123
        nickname:
          type: string
          example: Johnny
  responses:
    BadRequest:
      description: Invalid request body
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid request body
    NotFound:
      description: User not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: User not found
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: An unexpected error occurred
